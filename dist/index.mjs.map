{"version":3,"sources":["../src/matchers/responses.ts","../src/matchers/array.matchers.ts"],"sourcesContent":["export const failResponse = (message: string): jest.CustomMatcherResult => {\n  return {\n    pass: false,\n    message: () => (message ? message : 'fails by .fail() assertion'),\n  };\n};\nexport const passResponse = (): jest.CustomMatcherResult => {\n  return {\n    pass: true,\n    message: () => '',\n  };\n};\n","import { passResponse, failResponse } from './responses';\n\nexport function toMatchInAnyOrder(actualArray: any[], expectedArray: any[]): jest.CustomMatcherResult {\n  try {\n    expectedArray.forEach(item => {\n      expect(actualArray).toContainEqual(item);\n    });\n  } catch (e) {\n    return failResponse('Items in list are not the same');\n  }\n  try {\n    expect(actualArray.length).toEqual(expectedArray.length);\n  } catch (e) {\n    return failResponse('Lengths do not match');\n  }\n  return passResponse();\n}\n"],"mappings":";AAAO,IAAM,eAAe,CAAC,YAA8C;AACzE,SAAO;AAAA,IACL,MAAM;AAAA,IACN,SAAS,MAAO,UAAU,UAAU;AAAA,EACtC;AACF;AACO,IAAM,eAAe,MAAgC;AAC1D,SAAO;AAAA,IACL,MAAM;AAAA,IACN,SAAS,MAAM;AAAA,EACjB;AACF;;;ACTO,SAAS,kBAAkB,aAAoB,eAAgD;AACpG,MAAI;AACF,kBAAc,QAAQ,UAAQ;AAC5B,aAAO,WAAW,EAAE,eAAe,IAAI;AAAA,IACzC,CAAC;AAAA,EACH,SAAS,GAAG;AACV,WAAO,aAAa,gCAAgC;AAAA,EACtD;AACA,MAAI;AACF,WAAO,YAAY,MAAM,EAAE,QAAQ,cAAc,MAAM;AAAA,EACzD,SAAS,GAAG;AACV,WAAO,aAAa,sBAAsB;AAAA,EAC5C;AACA,SAAO,aAAa;AACtB;","names":[]}